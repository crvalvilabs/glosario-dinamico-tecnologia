"""import streamlit as st
import pandas as pd
from datetime import datetime
from snowflake.snowpark.functions import col

# --- Cargar CSS externo ---
def load_local_css(file_path):
    with open(file_path) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

load_local_css("assets/style.css")

# --- Configuraci√≥n general ---
st.set_page_config(page_title="Glosario Tecnol√≥gico", layout="wide")

# --- Inicializar contador de versi√≥n para forzar recarga del cach√© ---
if "glosario_version" not in st.session_state:
    st.session_state.glosario_version = 0

# --- T√≠tulo ---
# st.markdown("<h1 style='text-align:center;'>üìñ Glosario Tecnol√≥gico</h1>", unsafe_allow_html=True)
# st.markdown("<hr>", unsafe_allow_html=True)
# Emoji separado
st.markdown("""
<div style='text-align:center; font-size: 2.5rem;'>üìñ</div>
""", unsafe_allow_html=True)

# T√≠tulo con degradado
st.markdown("""
<div class='glossary-title'>
    Glosario Tecnol√≥gico
</div>
""", unsafe_allow_html=True)

# L√≠nea separadora
st.markdown("<hr>", unsafe_allow_html=True)

# --- Conexi√≥n a Snowflake ---
@st.cache_resource
def get_session():
    return st.connection("snowflake").session()

session = get_session()

# --- Cargar glosario desde Snowflake con control de versi√≥n ---
@st.cache_data(ttl=300)
def load_glosario(dummy=0):
    try:
        df = session.table("glosario").select(col("termino"), col("definicion"))
        return df.to_pandas()
    except Exception as e:
        load_glosario.clear()
        st.error("‚ùå Error al cargar datos desde Snowflake.")
        st.exception(e)
        return pd.DataFrame(columns=["termino", "definicion"])

# --- Validaci√≥n de existencia de un t√©rmino
def validate_term(term):
    query = f"SELECT 1 FROM GLOSARIO_DB.PUBLIC.GLOSARIO WHERE TERMINO = '{term}'"
    result = session.sql(query).collect()
    return len(result) > 0
    
# --- Insertar nuevo t√©rmino (seguro con Snowpark) ---
def insert_term(term, definition):
    df = session.create_dataframe([[term, definition]], schema=["termino", "definicion"])
    df.write.mode("append").save_as_table("glosario")

# --- Eliminar m√∫ltiples t√©rminos de una vez (seguro y eficiente) ---
def delete_terms(terminos):
    if not terminos:
        return
    for term in terminos:
        session.sql("DELETE FROM glosario WHERE termino = :1", params=[term]).collect()

# --- Estado para vista de detalle ---
if "modo_detalle" not in st.session_state:
    st.session_state.modo_detalle = False

# === TABS PRINCIPALES ===
tab1, tab2, tab3 = st.tabs(["üìö Ver glosario", "‚ûï A√±adir t√©rmino", "‚úñÔ∏è Eliminar t√©rmino"])

# === TAB 1: Ver glosario ===
with tab1:
    data = load_glosario(dummy=st.session_state.glosario_version)

    if st.session_state.modo_detalle:
        st.markdown("### üìñ Detalle del t√©rmino")
        st.markdown(f"#### {st.session_state.detalle_termino}")
        st.markdown(f"<p style='text-align:justify;'>{st.session_state.detalle_definicion}</p>", unsafe_allow_html=True)

        if st.button("üîô Volver", type="tertiary"):
            st.session_state.modo_detalle = False
            st.rerun()

    else:
        search = st.text_input(label="üîç Buscar t√©rmino:", placeholder="Ej: microprocesador, dato, hardware...")

        filtered = data[data["TERMINO"].str.contains(search, case=False, na=False)] if search.strip() else data

        if filtered.empty:
            st.warning("No se encontraron resultados para esa b√∫squeda.")
        else:
            col1, col2, col3 = st.columns(3)

            for idx, row in enumerate(filtered.iterrows()):
                _, row = row
                target_col = [col1, col2, col3][idx % 3]
                with target_col:
                    st.markdown(
                        f"""
                        <div class='card'>
                            <h4>{row["TERMINO"]}</h4>
                            <p>{row["DEFINICION"][:120]}...</p>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    if st.button("Ver m√°s", key=f"vermas_{idx}", type="tertiary"):
                        st.session_state.modo_detalle = True
                        st.session_state.detalle_termino = row["TERMINO"]
                        st.session_state.detalle_definicion = row["DEFINICION"]
                        st.rerun()

# === TAB 2: A√±adir o eliminar t√©rminos ===
with tab2:
    st.subheader("üìÑ A√±adir t√©rmino al glosario")

    with st.form("form_add_term"):
        nuevo_termino = st.text_input("‚úèÔ∏è Nombre del nuevo t√©rmino", placeholder="Ej: Inteligencia Artificial", key="nuevo_termino_input")
        nueva_definicion = st.text_area("üìù Definici√≥n", placeholder="Escribe una definici√≥n clara y breve del t√©rmino...", key="nueva_definicion_input")
        guardar = st.form_submit_button("üíæ Guardar t√©rmino", type="secondary")

        if guardar:
            if not nuevo_termino.strip() or not nueva_definicion.strip():
                st.warning("‚ö†Ô∏è Por favor completa ambos campos.")
                st.stop()

            if validate_term(nuevo_termino.strip()):
                st.error("‚õî El t√©rmino ya existe en el glosario.")
                st.stop()

            insert_term(nuevo_termino.strip(), nueva_definicion.strip())
            st.success(f"‚úÖ '{nuevo_termino}' fue a√±adido correctamente.")
            load_glosario.clear()
            st.session_state.glosario_version += 1
            st.rerun()
                
# === TAB 3: Eliminar t√©rminos ===
with tab3:
        st.subheader("üóëÔ∏è Eliminar t√©rmino del glosario")
    
        data = load_glosario(dummy=st.session_state.glosario_version)
        opciones = data["TERMINO"].tolist()
        seleccion = st.multiselect("Selecciona t√©rmino(s) a eliminar:", opciones)

        if seleccion:
            confirmar = st.button("‚ùå Eliminar t√©rmino(s) seleccionados", type="secondary")
            if confirmar:
                delete_terms(seleccion)
                st.success(f"‚úÖ '{nuevo_termino}' eliminado correctamente.")
                load_glosario.clear()
                st.session_state.glosario_version += 1
                st.rerun()

# --- Footer ---
st.markdown("""
<hr style='margin-top: 4rem;'>
<div style='text-align:center; color:#6c757d; font-size:0.9rem;'>
    Developed by <strong>IA Visionaria 2025</strong>
</div>
""", unsafe_allow_html=True)"""

import streamlit as st
import pandas as pd
from datetime import datetime
from snowflake.snowpark.functions import col

# --- Cargar CSS externo ---
def load_local_css(file_path):
    with open(file_path) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

load_local_css("assets/style.css")

# --- Configuraci√≥n general ---
st.set_page_config(page_title="Glosario Tecnol√≥gico", layout="wide")

# --- Inicializar contador de versi√≥n para forzar recarga del cach√© ---
if "glosario_version" not in st.session_state:
    st.session_state.glosario_version = 0

# --- T√≠tulo completamente limpio ---
st.markdown("# üìñ Glosario Tecnol√≥gico", unsafe_allow_html=False)

# L√≠nea separadora
st.markdown("<div style='height: 2px; background: linear-gradient(90deg, transparent, #7ED321, transparent); margin: 2rem 0;'></div>", unsafe_allow_html=True)

# --- Conexi√≥n a Snowflake ---
@st.cache_resource
def get_session():
    return st.connection("snowflake").session()

session = get_session()

# --- Cargar glosario desde Snowflake con control de versi√≥n ---
@st.cache_data(ttl=300)
def load_glosario(dummy=0):
    try:
        df = session.table("glosario").select(col("termino"), col("definicion"))
        return df.to_pandas()
    except Exception as e:
        load_glosario.clear()
        st.error("‚ùå Error al cargar datos desde Snowflake.")
        st.exception(e)
        return pd.DataFrame(columns=["termino", "definicion"])

# --- Validaci√≥n de existencia de un t√©rmino
def validate_term(term):
    query = f"SELECT 1 FROM GLOSARIO_DB.PUBLIC.GLOSARIO WHERE TERMINO = '{term}'"
    result = session.sql(query).collect()
    return len(result) > 0
    
# --- Insertar nuevo t√©rmino (seguro con Snowpark) ---
def insert_term(term, definition):
    df = session.create_dataframe([[term, definition]], schema=["termino", "definicion"])
    df.write.mode("append").save_as_table("glosario")

# --- Eliminar m√∫ltiples t√©rminos de una vez (seguro y eficiente) ---
def delete_terms(terminos):
    if not terminos:
        return
    for term in terminos:
        session.sql("DELETE FROM glosario WHERE termino = :1", params=[term]).collect()

# --- Estado para vista de detalle ---
if "modo_detalle" not in st.session_state:
    st.session_state.modo_detalle = False

# === TABS PRINCIPALES con mejor estilo ===
tab1, tab2, tab3 = st.tabs(["üìö Ver glosario", "‚ûï A√±adir t√©rmino", "‚úñÔ∏è Eliminar t√©rmino"])

# === TAB 1: Ver glosario ===
with tab1:
    data = load_glosario(dummy=st.session_state.glosario_version)

    if st.session_state.modo_detalle:
        # Mostrar t√≠tulo y definici√≥n sin emojis en HTML
        st.markdown("### üìñ Detalle del t√©rmino")
        st.markdown(f"""
        <div class='card' style='margin: 2rem 0;'>
            <h2 style='color: #2D3748; margin-bottom: 1rem;'>{st.session_state.detalle_termino}</h2>
            <p style='text-align: justify; line-height: 1.6; color: #4A5568;'>{st.session_state.detalle_definicion}</p>
        </div>
        """, unsafe_allow_html=True)

        if st.button("üîô Volver", type="primary"):
            st.session_state.modo_detalle = False
            st.rerun()

    else:
        # Buscador mejorado
        st.markdown("### üîç Buscar t√©rminos")
        search = st.text_input(
            label="Buscar t√©rmino:", 
            placeholder="Ej: microprocesador, dato, hardware...",
            label_visibility="collapsed"
        )

        filtered = data[data["TERMINO"].str.contains(search, case=False, na=False)] if search.strip() else data

        if filtered.empty:
            st.markdown("""
            <div class='card' style='text-align: center; padding: 3rem;'>
                <h3 style='color: #68D391;'>Sin resultados</h3>
                <p>No se encontraron resultados para esa b√∫squeda.</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"### üìö T√©rminos encontrados ({len(filtered)})")
            
            col1, col2, col3 = st.columns(3)

            for idx, row in enumerate(filtered.iterrows()):
                _, row = row
                target_col = [col1, col2, col3][idx % 3]
                with target_col:
                    # Card mejorada con hover y mejor dise√±o
                    st.markdown(
                        f"""
                        <div class='card' style='margin-bottom: 1.5rem; min-height: 200px;'>
                            <h4 style='color: #2D3748; margin-bottom: 1rem; font-weight: 700;'>{row["TERMINO"]}</h4>
                            <p style='color: #4A5568; line-height: 1.5; margin-bottom: 1.5rem;'>{row["DEFINICION"][:120]}...</p>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    if st.button("Ver m√°s", key=f"vermas_{idx}", type="primary", use_container_width=True):
                        st.session_state.modo_detalle = True
                        st.session_state.detalle_termino = row["TERMINO"]
                        st.session_state.detalle_definicion = row["DEFINICION"]
                        st.rerun()

# === TAB 2: A√±adir t√©rminos ===
with tab2:
    st.markdown("### ‚ûï A√±adir nuevo t√©rmino")
    
    # Formulario con mejor estilo
    st.markdown("""
    <div class='card' style='margin: 2rem 0;'>
        <h4 style='color: #2D3748; margin-bottom: 1.5rem;'>Informaci√≥n del t√©rmino</h4>
    </div>
    """, unsafe_allow_html=True)

    with st.form("form_add_term"):
        nuevo_termino = st.text_input(
            "‚úèÔ∏è Nombre del t√©rmino", 
            placeholder="Ej: Inteligencia Artificial",
            key="nuevo_termino_input"
        )
        nueva_definicion = st.text_area(
            "üìù Definici√≥n", 
            placeholder="Escribe una definici√≥n clara y breve del t√©rmino...",
            key="nueva_definicion_input",
            height=150
        )
        
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            guardar = st.form_submit_button(
                "üíæ Guardar t√©rmino", 
                type="primary",
                use_container_width=True
            )

        if guardar:
            if not nuevo_termino.strip() or not nueva_definicion.strip():
                st.warning("‚ö†Ô∏è Por favor completa ambos campos.")
                st.stop()

            if validate_term(nuevo_termino.strip()):
                st.error("‚õî El t√©rmino ya existe en el glosario.")
                st.stop()

            try:
                insert_term(nuevo_termino.strip(), nueva_definicion.strip())
                st.success(f"‚úÖ '{nuevo_termino}' fue a√±adido correctamente.")
                load_glosario.clear()
                st.session_state.glosario_version += 1
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå Error al guardar el t√©rmino: {e}")
                
# === TAB 3: Eliminar t√©rminos ===
with tab3:
    st.markdown("### üóëÔ∏è Eliminar t√©rminos")
    
    data = load_glosario(dummy=st.session_state.glosario_version)
    
    if data.empty:
        st.markdown("""
        <div class='card' style='text-align: center; padding: 3rem;'>
            <h3 style='color: #68D391;'>Glosario vac√≠o</h3>
            <p>No hay t√©rminos en el glosario para eliminar.</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class='card' style='margin: 2rem 0;'>
            <h4 style='color: #2D3748; margin-bottom: 1.5rem;'>Selecciona los t√©rminos a eliminar</h4>
            <p style='color: #E53E3E; font-size: 0.9rem;'>Esta acci√≥n no se puede deshacer.</p>
        </div>
        """, unsafe_allow_html=True)
        
        opciones = data["TERMINO"].tolist()
        seleccion = st.multiselect(
            "T√©rminos disponibles:", 
            opciones,
            placeholder="Busca y selecciona t√©rminos..."
        )

        if seleccion:
            st.markdown(f"""
            <div class='card' style='background-color: #FED7D7; border-left: 4px solid #E53E3E;'>
                <p><strong>T√©rminos seleccionados para eliminar:</strong></p>
                <ul>
                    {''.join([f'<li>{term}</li>' for term in seleccion])}
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns([1, 1, 1])
            with col2:
                confirmar = st.button(
                    f"‚ùå Eliminar {len(seleccion)} t√©rmino(s)", 
                    type="primary",
                    use_container_width=True
                )
                
            if confirmar:
                try:
                    delete_terms(seleccion)
                    st.success(f"‚úÖ {len(seleccion)} t√©rmino(s) eliminado(s) correctamente.")
                    load_glosario.clear()
                    st.session_state.glosario_version += 1
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Error al eliminar t√©rminos: {e}")

# --- Footer mejorado ---
st.markdown("""
<div style='margin-top: 4rem;'>
    <div style='height: 2px; background: linear-gradient(90deg, transparent, #7ED321, transparent); margin: 2rem 0;'></div>
    <div class='card' style='text-align: center; background: rgba(126, 211, 33, 0.05);'>
        <p style='margin: 0; color: #4A5568; font-size: 0.9rem;'>
            Desarrollado con amor por <strong style='color: #7ED321;'>IA Visionaria 2025</strong>
        </p>
    </div>
</div>
""", unsafe_allow_html=True)
